name: Release to TestPyPI

on:
  release:
    types: [published]

jobs:
  build_and_publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, macos-latest ] # ubuntu-latest,
        python-version: [ "3.11" ]
        include:
          - python-version: "3.11"
            cibw-version: "311"
#        python-version: [ "3.11", "3.12" ]
#        include:
#          - python-version: "3.11"
#            cibw-version: "311"
#          - python-version: "3.12"
#            cibw-version: "312"
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install cibuildwheel and tools
        run: |
          python -m pip install --upgrade cibuildwheel twine

      - name: Install build dependencies
        run: python -m pip install --upgrade setuptools wheel numpy cython

      - name: Build wheels with cibuildwheel for Python ${{ matrix.python-version }}
        env:
          CIBW_BUILD: cp${{ matrix.cibw-version }}-* #cp311-* cp312-*
          CIBW_OUTPUT_DIR: wheelhouse
          CIBW_BUILD_FRONTEND: build
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ARCHS_MACOS: universal2
        run: |
          python -m cibuildwheel --output-dir wheelhouse #--debug-traceback

#      - name: Build sdist (source tarball)
#        if: matrix.os == 'macos-latest'
#        run: python setup.py sdist

      - name: Upload wheels to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_PASSWORD }}
        run: |
          python -m twine upload --repository testpypi wheelhouse/*.whl
        #          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
        #            python -m twine upload --repository testpypi dist/*.tar.gz
        #          fi
        # python -m twine upload --repository testpypi wheelhouse/*.whl --verbose

  generate_conda_recipe:
    needs: build_and_publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get SHA256 of GitHub release tarball
        id: compute_sha
        run: |
          VERSION=${{ github.ref_name }}
          curl -L -o source.tar.gz https://github.com/${{ github.repository }}/archive/refs/tags/${VERSION}.tar.gz
          SHA=$(sha256sum source.tar.gz | awk '{print $1}')
          echo "sha256=$SHA" >> $GITHUB_OUTPUT

      - name: Create conda recipe with meta.yaml
        run: |
          mkdir -p conda-recipe
          VERSION=${{ github.ref_name }}
          SHA=${{ steps.compute_sha.outputs.sha256 }}
          cat > conda-recipe/meta.yaml <<EOF
          package:
            name: cy-py-test
            version: "${VERSION}"
          
          source:
            url: https://github.com/${{ github.repository }}/archive/refs/tags/${VERSION}.tar.gz
            sha256: ${SHA}
          
          build:
            script: python -m pip install . --no-deps --ignore-installed -vv
          
          requirements:
            host:
              - python >=3.7
              - pip
              - setuptools
            run:
              - python >=3.7
          
          test:
            imports:
              - my_cy
          
          about:
            license: MIT
            summary: "Example Cython test project"

          EOF

      - name: Upload Conda recipe
        uses: actions/upload-artifact@v4
        with:
          name: conda-recipe
          path: conda-recipe/

  build_installers:
    needs: build_and_publish
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: [ "3.11" ]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install app from TestPyPI
        run: |
          pip install --upgrade pip
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ cy_py_test

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build executable with PyInstaller
        run: |
          cd packages
          pyinstaller --clean cy_py_test.spec

      - name: Windows installer (NSIS)
        if: runner.os == 'Windows'
        run: |
          choco install nsis -y
          cd packages
          type installer.nsi
          makensis installer.nsi

      - name: macOS installer (DMG)
        if: runner.os == 'macOS'
        run: |
          brew install create-dmg
          cd packages
          mkdir -p output
          rm -f output/CyPyTest.dmg
          ls -la dist
          ls -la dist/cy_py_test
          create-dmg \
            --volname "CyPyTest" \
            --hide-extension "cy_py_test.app" \
            --app-drop-link 600 185 \
            "output/CyPyTest.dmg" \
            "dist/" \

      - name: Upload installer artifacts
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.os }}
          path: |
            packages/dist/cy_py_test/*.exe
            packages/output/*.dmg

      - name: Upload Windows executables to GitHub Release
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'release' && runner.os == 'Windows'
        with:
          files: packages/dist/cy_py_test/*.exe

      - name: Upload macOS dmg files to GitHub Release
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'release' && runner.os == 'macOS'
        with:
          files: packages/output/*.dmg
#
#      - name: Upload to GitHub Release
#        uses: softprops/action-gh-release@v1
#        if: github.event_name == 'release'
#        with:
#          files: |
#            packages/dist/cy_py_test/*.exe
#            packages/output/*.dmg